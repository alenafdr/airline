<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="PriceMapper">
    <resultMap id="PriceResultMap" type="Price">
        <constructor>
            <arg column="price" javaType="BigDecimal"/>
        </constructor>
        <result property="price" column="price"/>
        <association property="classType"
                     resultMap="ClassTypeMapper.ClassTypeResultMap"/>
        <association property="flight"
                     select="FlightMapper.selectFlightById"
                     column="flight_id"/>
    </resultMap>
    <resultMap id="SimplePriceResultMap" type="Price">
        <constructor>
            <arg column="price" javaType="BigDecimal"/>
        </constructor>
        <result property="price" column="price"/>
        <association property="classType"
                     resultMap="ClassTypeMapper.ClassTypeResultMap"/>
    </resultMap>
    <insert id="insertPrice">
      insert into prices (flight_id, class_id, price)
      VALUES (#{flight.id},#{classType.id},#{price})
    </insert>
    <select id="selectPricesForFlight" resultMap="PriceResultMap">
      SELECT
      prices.flight_id,
      prices.class_id,
      prices.price,
      c2.id,
      c2.name
      FROM prices
      left join classes c2 on prices.class_id = c2.id
      WHERE prices.flight_id = #{id}
    </select>

    <select id="findPriceByOrderIdAndClassId" resultMap="SimplePriceResultMap">
      SELECT
      p.flight_id,
      p.class_id,
      p.price,
      c.id,
      c.name,
      f.id,
      d.flight_id,
      o.id
      FROM prices p
      join flights f on p.flight_id = f.id
      join departures d on f.id = d.flight_id
      join orders o on d.id = o.departure_id
      left join classes c on p.class_id = c.id
      WHERE o.id = #{orderId} and c.id = #{classId}
    </select>
    <insert id="updatePrice">
      insert  into prices(flight_id, class_id, price)
      values (#{flight.id},#{classType.id},#{price})
      on conflict (flight_id, class_id)
      do update set (flight_id, class_id, price) = (#{flight.id},#{classType.id},#{price})
    </insert>

    <delete id="deletePrice" parameterType="Price">
      delete from prices
      where flight_id = #{flight.id} and class_id = #{classType.id}
    </delete>

    <delete id="deletePricesByFlightId" parameterType="Long">
      delete from prices
      where flight_id = #{flightId}
    </delete>
</mapper>